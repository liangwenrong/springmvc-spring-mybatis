<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context.xsd">

	<!--检测注解 -->
	<!-- springmvc只初始化控制层的bean， 避免springmvc管理spring的的bean导致事务不起作用 -->
	<context:component-scan base-package="com.lwr"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.RestController" />
	</context:component-scan>

	<!-- 启动注解驱动的Spring MVC功能 -->
	<mvc:annotation-driven>
		<!-- 这里配置需要的编码转换器Converter -->
		<!-- <mvc:message-converters> -->
		<!-- 配置上Jackjson的依赖jar,使用MappingJacksonHttpMessageConverter -->
		<!-- <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" 
			/> -->
		<!-- <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
			<constructor-arg value="UTF-8" index="0" /> <property name="supportedMediaTypes"> 
			<list> <value>text/plain;charset=UTF-8</value> <value>text/html;charset=UTF-8</value> 
			<value>application/json;charset=UTF-8</value> </list> </property> </bean> -->
		<!-- </mvc:message-converters> -->
	</mvc:annotation-driven>

	<!-- 因为dispatcherServlet覆盖了web的defaultServlet（web容器自带用来处理静态资源的） -->
	<!-- mvc:default-servlet-handler的作用是当dispatcherServlet无法处理的静态资源请求会交回给defaultServlet处理 -->
	<mvc:default-servlet-handler />

	<mvc:interceptors>
		<!-- 使用bean定义的Interceptor将拦截所有的请求（包括静态资源） -->
		<!-- <bean id="authentication" class="com.lwr.interceptor.AuthenticationInterceptor" 
			/> -->
		<!-- 进行拦截：/**表示拦截所有路径 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/" />
			<!-- 放开登录和注册不进行登录验证，或者在拦截器中检查url -->
			<mvc:exclude-mapping path="/login/**" />
			<mvc:exclude-mapping path="/public/**" />
			<bean class="com.lwr.interceptor.AuthenticationInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 配置视图解析器 如何把handler 方法返回值解析为实际的物理视图 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="52428800" /> 
        <property name="maxUploadSizePerFile" value="10240000" /> 
    </bean>
</beans>